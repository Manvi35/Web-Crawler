# -*- coding: utf-8 -*-
"""WebCrawler_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WN-jeQSdQN6ka-SD2bAT_l4WQYcZjGpU
"""

## for using in GoogleCollab:
#pip install googlesearch
#pip install duckduckgo_search        


## for using in any other python Notebook:
# !pip install googlesearch-python
# !pip install --user duckduckgo_search

#pip install xlsxwriter
#pip install yfinance
#pip install wikipedia-api
#pip install wikipedia
#pip install pandas
#pip install numpy
#pip install requests
#pip install bs4
#pip install urllib.parse
#pip install datetime
#pip install csv

print("Application is Running... Please Wait for Input Prompt")
import os
import fsspec
import tkinter as tk
from tkinter import simpledialog
import pandas as pd
import numpy as np
import requests
from bs4 import BeautifulSoup
import requests
from urllib.parse import urljoin
import datetime
import csv

import wikipediaapi
import wikipedia
print("Wikipediaapi Imported")
print("Wikipedia Imported")

try:
    from duckduckgo_search import ddg as ddg
except ImportError:
    print("No module named 'duckduckgo' found")
else:
    print("DuckDuckGO Imported")

try:
    from googlesearch import search
except ImportError:
    print("No module named 'google' found")
else:
    print("GoogleSearch Imported")

try:
    import yfinance as yf
except ImportError:
    print("No Module named 'yfinance' found " )
else:
    print("YahooFinance Imported")

#query=pd.read_excel("C:\\GamesSSD\\Python Test\\Excel Test1.xlsm")
#query_primary = query['Company Name'].values[0]
#query_primary = query.to_string(index = False)

ROOT = tk.Tk()
canvas1 = tk.Canvas(ROOT, width = 300, height = 300)
canvas1.pack()
ROOT.withdraw()

# the input dialog
USER_INP1 = simpledialog.askstring(title="Company Name",
                                  prompt="Enter Company Name:")
USER_INP2 = simpledialog.askstring(title="Folder Name",
                                  prompt="Enter Destination Folder Name where you want to save: ")
ROOT.withdraw()
#ROOT.mainloop()
# check it out
query_primary=USER_INP1
directory=USER_INP2
print("Searching Company Name: ",query_primary)
#query_primary=input("Enter Company Name:")
#directory = input("Enter Folder Name where you want to save: ")
query_wiki1=(query_primary+" inc")
query_wiki2=(query_primary+" limited")
query_wiki3=(query_primary+" industries")
#print("Enter time interval for Stock Prices to be retrieved: ")
#start_date=input("Enter start date in the format YYYY-MM-DD: ")
#end_date=input("Enter end date date in the format YYYY-MM-DD: ")
Current_Date = datetime.datetime.today()
Previous_Date = datetime.datetime.today() - datetime.timedelta(days=1)
parent_dir = "C://"
path = os.path.join(parent_dir, directory)
try:
    os.makedirs(path, exist_ok = True)
    print("Folder in C:/ '%s' created successfully" % directory)
    path_print="Please open your destination Folder to View the Output Excell. The Company Excel file has been created successfully in C:/ '%s' " % directory
except OSError as error:
    print("Folder in C:/ '%s' can not be created" % directory)

#Google
result_google=[]
#if googlesearch(using in Google Collab) is installed:
# for j in search(query_primary,num_results=10):
#     result_google.append(j)

#if googlesearch-python(using in any other Python Notebook) is installed
for j in search(query_primary):
     result_google.append(j)

df_google_raw=pd.DataFrame(result_google)
df_google_raw.columns=["Google Search Links"]
df_google=df_google_raw
df_google

#DUCKDUCKGO
results_ddg = ddg(query_primary, time='y', max_results=10)
df_ddg_raw=pd.DataFrame.from_dict(results_ddg)
df_ddg_raw.columns=["Title","DuckDuckGo Search Link","Article"]
df_ddg=df_ddg_raw
df_ddg

#Wikipedia
wiki_url1=(wikipedia.page(query_primary).url)
wiki_url2=(wikipedia.page(query_wiki1).url)
wiki_url3=(wikipedia.page(query_wiki2).url)
wiki_url4=(wikipedia.page(query_wiki3).url)
print("Retreived Wikipedia URL1: ",wiki_url1)
print("Retreived Wikipedia URL2: ",wiki_url2)
print("Retreived Wikipedia URL3: ",wiki_url3)
print("Retreived Wikipedia URL4: ",wiki_url4)

def download_page(url):
    response = requests.get(url)
    response.raise_for_status()
    return response.content

wikipage = download_page(wiki_url1)
wikipage_soup = BeautifulSoup(wikipage,'lxml')
def get_table(soup):
        table=soup.find('table',{'class':"infobox vcard"})
        return table
wiki_html = get_table(wikipage_soup)
#print(str(wiki_html)[0:100])
df_wiki_summarybox=pd.read_html(str(wiki_html))
#df_wiki_summarybox

wiki_dataframe=pd.DataFrame(df_wiki_summarybox[0])
#wiki_dataframe
wiki_dataframe.columns=["Tags","Values"]
wiki_dataframe_isin = wiki_dataframe
wikiwiki_dataframe_isin_yahoo=wiki_dataframe_isin[wiki_dataframe_isin['Tags']=='ISIN']
wiki_summary= wikipedia.summary(query_primary)
data_companysummary=[wiki_summary]
companysummary_dataframe = pd.DataFrame(data_companysummary, columns=['Company Summary'])







#YahooISIN
yahoo_input = wikiwiki_dataframe_isin_yahoo.iloc[0][1]
print("Company ISIN: ",yahoo_input)
df_yfinance=yf.Ticker(yahoo_input)
df_yfinance2=yf.Ticker(query_primary)
#Details Table
name=("Comapny Name",query_primary)
isin=("Company ISIN",yahoo_input)
URL1=("Retreived Wikipedia URL1",wiki_url1)
URL2=("Retreived Wikipedia URL2",wiki_url2)
URL3=("Retreived Wikipedia URL3",wiki_url3)
URL4=("Retreived Wikipedia URL4",wiki_url4)
details=name,isin,URL1,URL2,URL3,URL4
table = pd.DataFrame(details,columns=['Company Parameters','Company Details'])

#Saving Google,DuckDuckGo & Wikipedia in excel
with pd.ExcelWriter(path+'\\'+query_primary+'.xlsx') as writer:
  table.to_excel(writer, sheet_name='Summary', startcol=1,startrow=1)
  #df_companyinfo.to_excel(writer, sheet_name="Summary", startcol=1,startrow=7)
  #company_stocks.to_excel(writer, sheet_name='Summary',startcol=1,startrow=22)
  #table_busines_summary.to_excel(writer, sheet_name='Summary',startcol=1,startrow=28)
  #df_companyinfo.to_excel(writer, sheet_name='YahooCompanySummary')  
  wiki_dataframe.to_excel(writer, sheet_name='Wikipedia_Information_Box')
  companysummary_dataframe.to_excel(writer, sheet_name='WikipediaCompanySummary')
  #company_info_datframe_YahooSummary.to_excel(writer, sheet_name='YahooCompanySummary')
  df_ddg.to_excel(writer, sheet_name='DuckDuckGo')
  df_google.to_excel(writer,sheet_name='GoogleSearch')
  #company_balancesheet.to_excel(writer,sheet_name='Company_BalanceSheet')
  #company_financials.to_excel(writer,sheet_name='Company_Financials')
  #company_news.to_excel(writer,sheet_name='Company_News')
  #company_info_datframe.to_excel(writer,sheet_name='Company_Info')
  #Final_Table.to_excel(writer,sheet_name='IndianKanoon_Legal Cases')

  
#Yahoo
#df_yfinance=yf.Ticker(query_primary)
try:
    company_info=pd.DataFrame.from_dict(df_yfinance.info)
    company_balancesheet=pd.DataFrame.from_dict(df_yfinance.balance_sheet)
    company_financials=pd.DataFrame.from_dict(df_yfinance.financials)
    company_news=pd.DataFrame.from_dict(df_yfinance2.news)
    company_earnings=pd.DataFrame.from_dict(df_yfinance.earnings)
    company_stocks=df_yfinance.history(start=Previous_Date,end=Current_Date)
except ValueError:
    print("Company ISIN entry not found in Yahoo Finance. Please search for company exchnage name in Yahoo Finance.")
    #root3=tk.Tk()
    #yahoofinanceerror = tk.Label(root3,text="Company ISIN entry not found in Yahoo Finance. Please refer to company exchnage ID.",fg='red',font=('helvetica', 10))
    #yahoofinanceerror.pack()
    #root3.mainloop()

    ROOT4 = tk.Tk()
    canvas1 = tk.Canvas(ROOT4, width = 300, height = 300)
    canvas1.pack()
    ROOT4.withdraw()
    # the input dialog
    USER_INP3 = simpledialog.askstring(title="Company Exchange Name",
                                  prompt="Company ISIN entry not found in Yahoo Finance. Please refer to company exchnage ID.Enter Company's NSE Name in UpperCase:")
    yahoo_secondary=(USER_INP3+".NS")
    df_yfinance=yf.Ticker(yahoo_secondary)

    company_info=pd.DataFrame.from_dict(df_yfinance.info)
    company_balancesheet=pd.DataFrame.from_dict(df_yfinance.balance_sheet)
    company_financials=pd.DataFrame.from_dict(df_yfinance.financials)
    company_news=pd.DataFrame.from_dict(df_yfinance2.news)
    company_earnings=pd.DataFrame.from_dict(df_yfinance.earnings)
    company_stocks=df_yfinance.history(start=Previous_Date,end=Current_Date)
else:
    print("Company data successfully extracted from Yahoo Finance")
#YahooBusinessSummary
x1=("Sector",df_yfinance.info['sector'])
x2=("Symbol",df_yfinance.info['symbol'])
x3=("City",df_yfinance.info['city'])
x4=("Phone",df_yfinance.info['phone'])
x5=("Website",df_yfinance.info['website'])
x6=("Address1",df_yfinance.info['address1'])
x7=("Address2",df_yfinance.info['address2'])
x8=("Total Revenue",df_yfinance.info['totalRevenue'])
x9=("MarketCap",df_yfinance.info['marketCap'])
x10=("Total Assets",df_yfinance.info['totalAssets'])
x11=("Gross Profit",df_yfinance.info['grossProfits'])
business_summary=("Business Summary",df_yfinance.info['longBusinessSummary'])

# type(x1)
x=x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11
df_companyinfo = pd.DataFrame(x,columns=['Parameters', 'Values'])
df_business_summary=pd.DataFrame(business_summary[1:2],columns=['Business Summary'])
#company_info_dict=company_info
#with open('C:/GamesSSD/Python Test/company_info_dict_backend.csv', 'w') as output:
#    writer = csv.writer(output)
#    for key, value in company_info_dict.items():
#        writer.writerow([key, value])

#import numpy



#company_info_datframe=pd.read_csv("C:/GamesSSD/Python Test/company_info_dict_backend.csv")

#company_info_datframe_YahooSummary=company_info_datframe[company_info_datframe['zip']=='longBusinessSummary']
#company_info_datframe_YahooSummary.columns=["Yahoo Company Summary",""]
#YahooBusinessSummary = company_info_datframe_YahooSummary.iloc[0][1]


# company_summ=pd.DataFrame.from_dict(df_yfinance.summary)
#df_ybs=pd.DataFrame.from_dict(df_yfinance.balance_sheet)
#print(df_ybs)
#print(df_news)
print("\n Company Summary:\n")
print(wiki_summary)
print("\n Wikipedia Summary:\n")
print(wiki_dataframe)
print("\n DuckDuckGO Search Results: \n ")
print(df_ddg)
print("\n Google Search Results: \n ")
print(df_google)
print("\n Yahoo Finance Results: \n ")
print("Yahoo Compaany Summary: \n")
#display(yahoobusinesssummary)
print("Company Balance Sheet:",company_balancesheet)
print("Company Financials:",company_financials)
print("Company News:",company_news)
print("Company Info:",df_companyinfo)
#print("Company Info:",company_info_datframe)

#IndianKanoon links

class IndianKanoon():
  """
    Search query	https://api.indiankanoon.org/search/?formInput=<query>&pagenum=<pagenum>
    Document	https://api.indiankanoon.org/doc/<docid>/
    Document fragments	https://api.indiankanoon.org/docfragment/<docid>/?formInput=<query>
    Document Metainfo	https://api.indiankanoon.org/docmeta/<docid>/
  """

  def __init__(self):
    self.base_url = "https://api.indiankanoon.org/"
    self.auth_token = "dc57f1f1b4aff9ef4ff293267eae5a8c95a93e28"

    self.headers = {
        'authorization': "Token {}".format(self.auth_token),
        'cache-control': "no-cache",
    }
    self.api_session = requests.Session()
    self.api_session.headers = self.headers

  def search(self, formInput, pagenum=0,
             fromdate=None, todate=None,
             title=None, author=None,
             cite=None, bench=None):
    #  Creating parameters
    params = {
        'formInput': formInput,
        'pagenum': pagenum
    }
    if fromdate:
      assert isinstance(fromdate, datetime) 
      params['fromdate'] = fromdate.strftime('%d-%m-&Y')

    if todate:
      assert isinstance(todate, datetime) 
      params['todate'] = todate.strftime('%d-%m-&Y')

    # Making the request
    response = self.api_session.post(
        urljoin(self.base_url, 'search/'), params=params)
    response.raise_for_status()
    return response.json()

  def doc(self, docid):
    response = self.api_session.post(
        urljoin(self.base_url, 'doc/{}/'.format(docid)))
    response.raise_for_status()
    return response.json()

  def docfragment(self, docid, formInput):
    params = {
        'formInput': formInput,
    }
    response = self.api_session.post(
        urljoin(self.base_url, 'docfragment/{}/'.format(docid)), params=params)
    response.raise_for_status()
    return response.json()

  def docmeta(self, docid):
    response = self.api_session.post(
        urljoin(self.base_url, 'docmeta/{}/'.format(docid)))
    response.raise_for_status()
    return response.json()

var=IndianKanoon()
IK_output=var.search(yahoo_input)
Docs=IK_output['docs']
IK_Table=pd.DataFrame.from_dict(Docs)
Final_Table = IK_Table[['title','url']]
print(Final_Table)

# wiki_summary.to_excel("Company name.xlsx",sheet_name='Sheet_name_1',engine='xlsxwriter')
with pd.ExcelWriter(path+'\\'+query_primary+'.xlsx') as writer:
  table.to_excel(writer, sheet_name='Summary', startcol=1,startrow=1)
  df_business_summary.to_excel(writer, sheet_name='Summary',startcol=1,startrow=9)
  df_companyinfo.to_excel(writer, sheet_name="Summary", startcol=1,startrow=12)
  company_stocks.to_excel(writer, sheet_name='Summary',startcol=1,startrow=26)
  #table_busines_summary.to_excel(writer, sheet_name='Summary',startcol=1,startrow=28)
  #df_companyinfo.to_excel(writer, sheet_name='YahooCompanySummary')  
  wiki_dataframe.to_excel(writer, sheet_name='Wikipedia_Information_Box')
  companysummary_dataframe.to_excel(writer, sheet_name='WikipediaCompanySummary')
  #company_info_datframe_YahooSummary.to_excel(writer, sheet_name='YahooCompanySummary')
  df_ddg.to_excel(writer, sheet_name='DuckDuckGo')
  df_google.to_excel(writer,sheet_name='GoogleSearch')
  company_balancesheet.to_excel(writer,sheet_name='Company_BalanceSheet')
  company_financials.to_excel(writer,sheet_name='Company_Financials')
  #company_news.to_excel(writer,sheet_name='Company_News')
  #company_info_datframe.to_excel(writer,sheet_name='Company_Info')
  Final_Table.to_excel(writer,sheet_name='IndianKanoon_Legal Cases')
print("Company Excel file created successfully in C:/ '%s' " % directory)
root2=tk.Tk()
canvas2 = tk.Canvas(root2, width = 400, height = 50)
canvas2.pack()
finish = tk.Label(root2,text=path_print,fg='green',font=('helvetica', 14))
finish.pack()
root2.mainloop()

#Export Wikipedia Summary to text file
#open text file
#text_file1 = open("C:\GamesSSD\Python Test\File Outputs\" + query_primary + " Wiki.txt", "w")
#text_file2 = open('C:\GamesSSD\Python Test\File Outputs\'+query_primary+" Yahoo.txt", "w")
#write string to file
#text_file1.write(wiki_summary)
#text_file2.write(YahooBusinessSummary)
#close file
#text_file1.close()
#text_file2.close()
